[{
    "id": "intelligent_rag",
    "user_id": "",
    "name": "Intelligent RAG",
    "type": "pipe",
    "content": "from typing import Optional, Callable, Awaitable\nfrom pydantic import BaseModel, Field\nimport requests\nimport re\n\nclass Pipe:\n    class Valves(BaseModel):\n        server_url: str = Field(\n            default=\"http://localhost:3000\",\n            description=\"URL of the intelligent-rag-server\"\n        )\n        project_id: str = Field(\n            default=\"default\",\n            description=\"Project ID to query against\"\n        )\n        thinking_depth: int = Field(\n            default=2,\n            description=\"Depth of thinking (1-4)\",\n            ge=1,\n            le=4\n        )\n\n    def __init__(self):\n        self.type = \"pipe\"\n        self.id = \"intelligent_rag\"\n        self.name = \"Intelligent RAG\"\n        self.valves = self.Valves()\n\n    async def pipe(\n        self,\n        body: dict,\n        __user__: Optional[dict] = None,\n        __event_emitter__: Optional[Callable[[dict], Awaitable[None]]] = None,\n        __event_call__: Optional[Callable[[dict], Awaitable[dict]]] = None,\n    ) -> Optional[dict]:\n        messages = body.get(\"messages\", [])\n\n        if messages:\n            question = messages[-1][\"content\"]\n            try:\n                headers = {\"Content-Type\": \"application/json\"}\n                payload = {\n                    \"projectId\": self.valves.project_id,\n                    \"query\": question,\n                    \"thinkingDepth\": self.valves.thinking_depth\n                }\n                response = requests.post(\n                    f\"{self.valves.server_url}/api/query\",\n                    json=payload,\n                    headers=headers\n                )\n                \n                if response.status_code == 200:\n                    rag_response = response.json()\n                    \n                    # Extract sections from response text\n                    response_text = rag_response.get(\"response\", \"\")\n                    sections = {}\n                    current_section = None\n                    current_text = []\n                    \n                    for line in response_text.split(\"\\n\"):\n                        if line.startswith(\"=== \") and line.endswith(\" ===\"):\n                            if current_section:\n                                sections[current_section] = \"\\n\".join(current_text).strip()\n                            current_section = line.strip(\"= \")\n                            current_text = []\n                        elif current_section:\n                            current_text.append(line)\n                    \n                    if current_section:\n                        sections[current_section] = \"\\n\".join(current_text).strip()\n                    \n                    # Extract answer and sources\n                    answer = sections.get(\"Query Response\", \"\").strip()\n                    sources_text = sections.get(\"Source Snippets\", \"\").strip()\n                    \n                    # Parse sources\n                    sources = []\n                    if sources_text:\n                        current_source = {}\n                        for line in sources_text.split(\"\\n\"):\n                            if line.startswith(\"[Part \"):\n                                if current_source:\n                                    sources.append(current_source)\n                                current_source = {\"name\": line.strip(\"[]\")}                                \n                            elif line.startswith(\"Text: \"):\n                                current_source[\"text\"] = line[6:].strip()\n                            elif line.startswith(\"Relevance: \"):\n                                current_source[\"relevance\"] = line[11:].strip()\n                        if current_source:\n                            sources.append(current_source)\n                    \n                    # Add sources as system message if available\n                    if sources:\n                        source_text = \"ðŸ“š **Source Snippets**\\n\\n\"\n                        for source in sources:\n                            source_text += f\"**{source.get('name', 'Unknown')}**\\n\"\n                            source_text += f\"{source.get('text', '')}\\n\"\n                            source_text += f\"*{source.get('relevance', '')}*\\n\\n\"\n                        body[\"messages\"].append({\n                            \"role\": \"system\",\n                            \"content\": source_text\n                        })\n                    \n                    # Add main answer\n                    body[\"messages\"].append({\n                        \"role\": \"assistant\",\n                        \"content\": answer\n                    })\n                    \n                    # Return just the answer\n                    return answer\n                    \n                else:\n                    raise Exception(f\"Error: {response.status_code} - {response.text}\")\n\n            except Exception as e:\n                return {\"error\": str(e)}\n        else:\n            body[\"messages\"].append({\n                \"role\": \"assistant\",\n                \"content\": \"No messages found in the request body\"\n            })\n\n        return None",
    "meta": {
        "description": "Allows you to chat with an intelligent RAG server that provides enhanced search and reasoning capabilities"
    },
    "manifest": {
        "title": "Intelligent RAG Function",
        "author": "OpenHands",
        "version": "0.1.0"
    },
    "is_active": false,
    "is_global": false,
    "updated_at": 1747598592,
    "created_at": 1747598592
}]